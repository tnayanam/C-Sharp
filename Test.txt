A namespace is used to organize classes, other namespaces, delegates, interfaces. etc. hello
By default, LINQ is deferred execution

Deferred Execution: Query is not executed at the point of declaration
	Example: Select, SelectMany, Take, Skip
Immediate Execution: Query is executed at the point of declaration
	Example: First, Last, SingleToList, ToArray
	
	Benefits: Query construction and execution is decoupled, thus we can decouple them.
			  A deferred execution query is reevaluated whtn ran thus it alwasy gets the latest data.	
			  Performance Kill is the down point.
			  
Example
DataContext context = new DataContext();
var query = from customer in context.Customers
 where customer.City == "Delhi"
 select customer; // Query does not execute here
 
 foreach (var Customer in query) // Query executes here
 {
 Console.WriteLine(Customer.Name);
 }
//
https://app.pluralsight.com/player?course=msbuild&author=david-starr&name=msbuild-1&clip=5&mode=live

// MS-Build: 
It is a tool that is used by VS to compile and build the solution.
It reads the XML files.
In order to create a msbuild file.
open VS create a new file with extension .msbuild
and open VS Command Prompt: and go to that file location and type msbuild <filename>.msbuild
and it will build.
Various Tags to be used in the file:
1. Project Name= Just a namespace
2. Target -> Container for Set of instructions.
3. Message -> if we want to display some message when file builds. for output
4. We can have multiple targets but by default the first target always gets hit.
5. So in our example we will see output of target HelloWOrld1 only.
6. But suppose we want to see the output of second appearing target, then in that case use velow:
msbuild HelloWorld.msbuild /target:HelloWOrld2  so now despite the target one should be invoked now its getting overidden.
7. Default targets: setting this makes that target to be executed as default
<Project DefaultTargets="HelloWorld2" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
setting like above and running msbuild <filename>.msbuild will run the deafult target.
8. but even after settign default target you want to oeverwrite it then you will use again the same command as
msbuild HelloWorld.msbuild /target:HelloWOrld2
9. So now suppose we dont want to type command line command to go to a particular target we can create another file to do so
So first create a file with name <filename>.rsp

and now go to command prompt and type: msbuild HelloWorld.msbuild @<filenaeme>.rsp
-- to run multiple targets all you need to do is 
/target:HelloWorld2,HelloWorld1
-- for debugging purpose sometimes you want to know alot more. so add this command in .rsp file 
/v:detailed     => verbosity as DETAILED!!
this wil provide more info in the console and help in debugging.

Now Variabls, they are stored under property group tag

OUTPUT: Hello, Tanuj! Full Name: Tanuj Nayanam

Now you can even pass the varibale from command prompt like below:
msbuild HelloWorld.msbuild @blah.rsp /p:Name=Lisa

Now the output will be:
Hello, Lisa! Full Name: Lisa Nayanam
See the reserved property.
Output:  MSBuildProjectDirectory : C:\Users\tnayanam\Desktop\Demo\C-Sharp

Basically in proerty group we define the variable
in Itemgroup we actually access the property
in Target we actually loooop through and execute.
here output is 

  C:\Users\tnayanam\Desktop\Demo\C-Sharp\A.txt;C:\Users\tnayanam\Desktop\Demo\C-Sharp\B.txt;C:\Users\tnayanam\Desktop\D
  emo\C-Sharp\Test.txt

all the text files.
Running multiple targets:

Now dependency betwwen targets
target b will execute first

Depends on target will be executed just once for C. It will not be executed for A and B both. SMART
Depends on target means the depends on will execute and then the actual target will get executed.
So in here you can see that Target A was called but targetc will get eecuted first.
TargetC:
  This is target C
TargetA:
  This is target A
================
Now After targets is different from DependsOnTarget
So if you run again (as default target is A) you can see below output:
TargetA:
  This is target A
but now if you if you run target c: then it will check is c somewhere mentioned in aftertarget which is A. so after C a will run
output
TargetC:
  This is target C
TargetA:
  This is target A

Now the order of operation would be IF WE CALL tARGET c THEN
Taregt a. Target c, target b

TargetA:
  This is target A
TargetC:
  This is target C
TargetB:
  This is target B

"Import" tag helps in bringing in other scripts xml file and can be used then.
Invoke MSBuild form another MSBUild, it helps in building some other projects

Okey so if you want to build another exe and run it form main solution you need to do below in the parent project
     <Target Name="AfterBuild">
    <!-- <MsBuild Projects="$(ProjectToBuildPath)" /> --> // this creates the exe 
    <!-- <Exec Command="C:\Users\tnayanam\Desktop\Demo\WebApi\CallAPI\CallAPI\CallAPI\bin\Debug\CallAPI.exe"/> --> // this runs the exe
	</Target>
	
	============================================================
	TASK
	============================================================
	Task.WaitAll() -> This means the current thread will be blocked untill the execution finishes.
	Task.WhenAll() -> Asynchronously , it returns method will continue when everything's completed but we wont tie up and thread to jsut hang around.
	
	static async void ExecuteTasks()
	{
		List<Task> tasks = new List<Task> {MethodA(), MethodB(), MethodC()};
		Task result = Task.WhenAll(tasks);
		try
		{
			await result;
		}
		catch(AggregateExcecption)
		{
			foreach(Ecception e in result.Exception.InnerExceptions)
			{
				Console.WriteLine(e.Message);
			}
		}
	}
	=======
	task.whenany
	=======
	We use Task.WhenAny when we have a collection of tasks,	but we only interested in the first finished task. It can happen for example when we have couple
	of async API that all of them do the same thing. But we want to receive the result from the one that return the result first.
	
	private static async Task<string> FirstRespondingUrlAsync(string urlA, string urlB)
{
  // Start both downloads concurrently.
  Task<string> downloadTaskA = _httpClient.GetHtmlResponseAsync(urlA);
  Task<string> downloadTaskB = _httpClient.GetHtmlResponseAsync(urlB);
  
  // Wait for either of the tasks to complete.
  Task<string> completedTask = await Task.WhenAny(downloadTaskA, downloadTaskB);
  
  // Return the length of the data retrieved from that URL.
  string data = await completedTask;
  
  return data;
}

It has await but it will act like synchronous
static async void OrderAsync()
{
    var stopwatch = Stopwatch.StartNew();
 
    await Task.Delay(3000)
        .ContinueWith(task => ShowCompletion("Fries", stopwatch.Elapsed)); // this will not execute further
    await Task.Delay(1000)
        .ContinueWith(task => ShowCompletion("Drink", stopwatch.Elapsed));// once above is executed this will start and will not execute further
    await Task.Delay(5000)
        .ContinueWith(task => ShowCompletion("Burger", stopwatch.Elapsed)); // now once this is executed then only code will proceed further
 // SO OVERALL THE CODE BECAME ASYNC.
    ShowCompletion("Order", stopwatch.Elapsed);
 
    stopwatch.Stop();
}

// Now make it run in parallel:
static async void OrderAsync()
{
    var stopwatch = Stopwatch.StartNew();
 
    var task1 =  Task.Delay(3000)
        .ContinueWith(task => ShowCompletion("Fries", stopwatch.Elapsed)); // this will not execute further
    var task2 = Task.Delay(1000)
        .ContinueWith(task => ShowCompletion("Drink", stopwatch.Elapsed));// once above is executed this will start and will not execute further
    var task3 = Task.Delay(5000)
        .ContinueWith(task => ShowCompletion("Burger", stopwatch.Elapsed)); // now once this is executed then only code will proceed further
    Await WhenAll(tastk1, task2, task3);
    ShowCompletion("Order", stopwatch.Elapsed);
 
    stopwatch.Stop();
}






